package ui

import "net/http"
import "fmt"
import "github.com/ikaio/tailmplx/internal/database"
import "encoding/json"
import "github.com/ikaio/tailmplx/internal/help"

templ ProductionEditor(r *http.Request) {
	<form x-data={ fmt.Sprintf("{state:{}, data: %s}", getMovie()) } x-effect="$refs.code.textContent = JSON.stringify($data.data, null, 4)" class="flex flex-col gap-2" method="post" enctype="multipart/form-data">
		<span>Editing: <span x-text="data.title"></span> #<span x-text="data.id"></span></span>
		<!-- Metadata Section -->
		@section("metadata", "primary informations about the title.") {
			@input("Title (should not include props like quality)", "data.title", "e.g: Career Opportunities")
			@input("Description (max: 500 chars)", "data.description", "tip: Say the year this title is from, featuring actors, directors, production company...")
			@input("Genres (separeted by comma. will be trimmed)", "data.genres", "e.g: romance, comedy, classic")
		}
		<!-- Images Section -->
		@section("images", "helps users identify this title more easily.") {
			<div class="flex flex-wrap gap-1">
				<img class="h-20 aspect-[27/40] bg-red-300" x-bind:src="data.images.cover"/>
				<img class="h-20 aspect-video bg-red-300" x-bind:src="data.images.banner"/>
				<template x-for="extra in data.images.extras">
					<img class="h-20 aspect-video bg-red-300" x-bind:src="extra.url"/>
				</template>
			</div>
			<div class="flex gap-1">
				@input("Cover Image URL", "data.images.cover", "e.g: myfile.png")
				@input("Banner Image URL", "data.images.banner", "e.g: myfile.png")
			</div>
			@section("extras", "add moments from the title, so the user can have a sneak peak of what he's gonna get from this title.") {
				<template x-for="extra in data.images.extras">
					@input("Extra Image URL", "extra.url", "e.g: myfile.png")
				</template>
				@button("data.images.extras.push({})", AMBER) {
					Add Extra Image
				}
			}
		}
		<!-- Downloads Section -->
		@section("downloads", "links users will use to download the content.") {
			<template x-for="(link, i) in data.links">
				<div class="p-2 bg-zinc-500/5 border border-zinc-500/10">
					@input("Option Name", "link.name", "e.g: Dual √Åudio: MKV 1080p")
					@input("Option URL", "link.url", "e.g: https://drive.google.com/? or magnet://? & etc...")
					@button("data.links.splice(i, 1)", DANGER) {
						Remove Option
					}
				</div>
			</template>
			@button("data.links.push({})", AMBER) {
				New Download Option
			}
		}
		@section("Output", "compare the output JSON structure to make sure everything is behaving accordingly") {
			<pre class="w-full overflow-auto text-xs" x-ref="code"></pre>
		}
		@button("fetch('', {headers: {'Content-Type': 'application/json'}, method: 'post', body: JSON.stringify($data.data)})", SAFE) {
			Save Changes
		}
	</form>
}

func ProductionHandlePost(w http.ResponseWriter, r *http.Request) {

	body, err := io.ReadAll(r.Body)
	if err != nil {
		http.Error(w, "body reading failed: "+err.Error(), http.StatusInternalServerError)
		return
	}
	defer r.Body.Close()

	var production database.Production
	err = json.Unmarshal(body, &production)
	if err != nil {
		http.Error(w, "json parsing failed: "+err.Error(), http.StatusInternalServerError)
		return
	}

	primary, err := help.GetImagePrimaryColorFromURL(production.Images.Cover)
	if err != nil {
		http.Error(w, "cover image primary color detection failed: "+err.Error(), http.StatusInternalServerError)
		return
	}

	production.Properties.PrimaryColor = primary

	err = production.Save()
	if err != nil {
		http.Error(w, "database saving failed: "+err.Error(), http.StatusInternalServerError)
		return
	}

	w.Write([]byte(production.ID + " " + primary))
}
