package components

import "fmt"
import "github.com/ikaio/tailmplx/services/production"

const embed = "https://www.youtube.com/embed/%s?controls=0"
const borderclr = "$el.style.borderColor = '%s'"

css border(clr string) {
	border-color: { clr };
	box-shadow: { "0px 0px 10px "+clr };
}

func markdownraw(text string) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) error {
		_, err := io.WriteString(w, "<div class=\"markdown\">"+text+"</div>")
		return err
	})
}

func tenary(condition bool, truthy, falthy string) string {
	if condition {
		return truthy
	}
	return falthy
}

css colorize(pallet production.ProductionPostProcess) {
	border-color: { pallet.DarkerColor };
	background: { pallet.LigherColor };
	color: { pallet.DarkerColor };
}

templ Badges(list []string, pallet production.ProductionPostProcess) {
	for _, name := range list {
		<a class={ "px-2 font-semibold border rounded", colorize(pallet) } href={ templ.SafeURL("/genre/" + strings.TrimSpace(name)) }>{ strings.TrimSpace(name) }</a>
	}
}

templ ProductionLanding(p production.Production) {
	<div class="relative flex overflow-hidden rounded bg-zinc-900">
		<img class="blur opacity-25 top-0 left-0 absolute w-full object-cover rounded" src={ p.Images.Banner }/>
		<img class="z-10 h-60 aspect-[27/40]" src={ p.Images.Cover }/>
		<div class="z-10 overflow-x-auto flex items-center h-60 gap-2 p-2">
			<iframe class={ "border rounded h-5/6 aspect-video", border(p.PostProcess.PrimaryColor) } src={ fmt.Sprintf(embed, p.Images.Trailer) } title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>
			for _, extra := range p.Images.Extras {
				<img class={ "border rounded h-5/6 max-w-80 hover:border-white", border(p.PostProcess.PrimaryColor) } src={ extra.Url }/>
			}
		</div>
	</div>
	<div class="flex flex-col mt-2">
		<div class="flex items-center justify-between">
			<div>
				<span class="font-semibold text-lg">{ p.Title }</span>
				<div class="mb-2 flex gap-1">
					@Badges(strings.Split(p.Genres, ","), p.PostProcess)
				</div>
			</div>
			<div class="flex gap-1">
				<button class="bg-zinc-200 px-2 py-1 rounded">
					@IconHeart()
				</button>
				<button class="bg-zinc-200 px-2 py-1 rounded">
					@IconLike()
				</button>
			</div>
		</div>
		@markdownraw(p.PostProcess.DescriptionHTML)
	</div>
	<div class="mt-6 flex flex-col gap-1">
		for i, download := range p.Downloads {
			<a href={ templ.SafeURL(download.URL) } class={ "p-2 gap-1 font-semibold text-sm sm:text-base flex justify-between w-full rounded border border-zinc-400", colorize(p.PostProcess), tenary(i%2 == 0, "bg-zinc-200", "bg-zinc-300") }>
				<div class="flex items-center gap-1">
					@IconMagnet()
					<span>{ download.Name }</span>
				</div>
				<div class="flex items-center gap-1">
					@IconUsers()
					<span>{ production.DisplayCachedPeersOrSchedule(download.URL) }</span>
				</div>
			</a>
		}
	</div>
}
