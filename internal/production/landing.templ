package production

import "github.com/ikaio/tailmplx/internal/database"
import "fmt"
import "github.com/ikaio/tailmplx/ui"

const embed = "https://www.youtube.com/embed/%s?si=l2UBeKVuHbzVpJpt&controls=0"
const borderclr = "$el.style.borderColor = '%s'"

css border(clr string) {
	border-color: { clr };
	box-shadow: { "0px 0px 10px "+clr };
}

func markdownraw(text string) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) error {
		_, err := io.WriteString(w, "<div class=\"markdown\">"+text+"</div>")
		return err
	})
}

func tenary(condition bool, truthy, falthy string) string {
	if condition {
		return truthy
	}
	return falthy
}

templ Landing(prod database.Production) {
	<div class="relative flex overflow-hidden rounded bg-zinc-900">
		<img class="blur opacity-25 top-0 left-0 absolute w-full object-cover rounded" src={ prod.Images.Banner }/>
		<img class="z-10 h-60 aspect-[27/40]" src={ prod.Images.Cover }/>
		<div class="z-10 overflow-x-auto flex items-center h-60 gap-2 p-2">
			<iframe class={ "border rounded h-5/6 aspect-video", border(prod.PostProcess.PrimaryColor) } src={ fmt.Sprintf(embed, prod.Images.Trailer) } title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>
			for _, extra := range prod.Images.Extras {
				<img class={ "border rounded h-5/6 max-w-80 hover:border-white", border(prod.PostProcess.PrimaryColor) } src={ extra.Url }/>
			}
		</div>
	</div>
	<div class="flex flex-col mt-2">
		<span class="font-semibold text-lg">{ prod.Title }</span>
		<div class="mb-2 flex gap-1">
			@Badges(strings.Split(prod.Genres, ","), prod.PostProcess)
		</div>
		@markdownraw(prod.PostProcess.DescriptionHTML)
	</div>
	<div class="mt-6 flex flex-col gap-1">
		for i, download := range prod.Downloads {
			<a href={ templ.SafeURL(download.URL) } class={ "p-2 gap-1 font-semibold text-sm sm:text-base flex justify-between w-full rounded border border-zinc-400", badge(prod.PostProcess), tenary(i%2 == 0, "bg-zinc-200", "bg-zinc-300") }>
				<div class="flex items-center gap-1">
					@ui.IconMagnet()
					<span>{ download.Name }</span>
				</div>
				<div class="flex items-center gap-1">
					@ui.IconUsers()
					<span>{ ShowPeers(download.URL) }</span>
				</div>
			</a>
		}
	</div>
	<script src="https://accounts.google.com/gsi/client" async></script>
	<div
		id="g_id_onload"
		data-login_hint
		data-client_id="581950817468-tlv862s1q1eev873rituo6m1d61ftp5i.apps.googleusercontent.com"
		data-login_uri="http://localhost:3000/api/google"
	></div>
}
